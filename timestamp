#!/bin/sh -e

TSA_URL='https://freetsa.org/tsr'
TSA_CAFILE=~/tsa-cacert.pem
TSA_BLOBREF='tsa-blobs'

[ -n "$TSA_URL" ] || {
	echo 'Error: timestamp authority URL is not detected' 1>&2
	exit 1
}

[ -s "$TSA_CAFILE" ] || {
	echo 'Error: CA certificate is not detected' 1>&2
	exit 1
}

usage() {
	cat <<- EOF
	Usage: timestamp [command] [revision]

	Command:
	    create  -- Create a timestamp
	    verify  -- Verify an existing timestamp
	    examine -- Show the full text output of an existing timestamp
	    remove  -- Remove an existing timestamp
	    push    -- Push the timestamp namespace to origin.
	    fetch   -- Fetch the timestamp namespace from origin.
	    help    -- Show help message
	EOF
}

prep() {
	REV="$1"

	[ -z "$REV" ] && REV='HEAD'

	REV="$(git rev-parse "$REV")"

	if [ "$(git notes --ref="$TSA_BLOBREF" show "$REV" 2>/dev/null)" ]; then
		NOTE=true
	fi
}

print_rev() {
	git rev-parse --short "$REV"
}

create() {
	[ -z "$NOTE" ] || {
		echo 'Error: Cannot overwrite existing trusted timestamp'
		exit 1
	}

	CONTENT_TYPE='Content-Type: application/timestamp-query'
	ACCEPT_TYPE='Accept: application/timestamp-reply'

	TIMESTAMP=$(openssl ts -query -cert -digest "$REV" -sha1 | \
	            curl -s -H "$CONTENT_TYPE" -H "$ACCEPT_TYPE" --data-binary @- "$TSA_URL" | \
	            openssl enc -base64)

	echo "$TIMESTAMP" | openssl enc -d -base64 | openssl ts -verify -digest "$REV" -in /dev/stdin -CAfile "$TSA_CAFILE" >/dev/null
	echo "$TIMESTAMP" | git notes --ref="$TSA_BLOBREF" add "$REV" --file -

	git notes --ref="$TSA_BLOBREF" show "$REV" | openssl enc -d -base64 | openssl ts -verify -digest "$REV" -in /dev/stdin -CAfile "$TSA_CAFILE" >/dev/null

	TEXT="$(echo "$TIMESTAMP" | openssl enc -d -base64 | openssl ts -reply -in /dev/stdin -text)"

	echo "Revision: $(print_rev) (CREATED)"
}

remove() {
	[ "$NOTE" ] || {
		echo 'Error: No trusted timestamp detected'
		exit 1
	}

	git notes --ref="$TSA_BLOBREF" remove "$REV" >/dev/null

	echo "Revision: $(print_rev) (REMOVED)"
}

examine() {
	[ "$NOTE" ] || {
		echo 'Error: No trusted timestamp detected'
		exit 1
	}

	TIMESTAMP="$(git notes --ref="$TSA_BLOBREF" show "$REV")"
	TEXT="$(echo "$TIMESTAMP" | openssl enc -d -base64 | openssl ts -reply -in /dev/stdin -text)"

	echo "Revision: $REV $(print_local_timestamp)"
	echo "$TEXT"
}

verify() {
	[ "$NOTE" ] || {
		echo 'Error: No trusted timestamp detected'
		exit 1
	}

	TIMESTAMP="$(git notes --ref="$TSA_BLOBREF" show "$REV")"
	TEXT="$(echo "$TIMESTAMP" | openssl enc -d -base64 | openssl ts -reply -in /dev/stdin -text)"
	echo "$TIMESTAMP" | openssl enc -d -base64 | openssl ts -verify -digest "$REV" -in /dev/stdin -CAfile "$TSA_CAFILE"

	echo "Revision: $(print_rev)"
}

push() {
	git push "origin" "refs/notes/$TSA_BLOBREF"
}

fetch() {
	git fetch "origin" "refs/notes/$TSA_BLOBREF:refs/notes/$TSA_BLOBREF"
}

main() {
	cmd="$1"

	if [ "$cmd" != 'help' ] && [ "$cmd" != 'version' ]; then
		git rev-parse --show-toplevel 2>/dev/null || {
			echo 'not a git repository' 1>&2
			exit 1
		}

		prep "$2"
	fi

	case "$cmd" in
		create)
			create
			;;
		examine)
			examine
			;;
		verify)
			verify
			;;
		remove)
			remove
			;;
		push)
			push
			;;
		fetch)
			fetch
			;;
		version)
			echo 'timestamp-1.2'
			;;
		help)
			usage
			;;
		'')
			usage
			;;
		*)
			echo "Error: invalid command: $cmd" 1>&2
			exit 1
			;;
	esac
}

main "$@"
